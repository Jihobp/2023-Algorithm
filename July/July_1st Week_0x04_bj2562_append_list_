#bj2562 https://www.acmicpc.net/problem/2562

num = [] #'num' empty list
max_num = 0 # empty num
index = 0 # empty list 

for i in range(9): #repeat 9 
    input_num = int(input()) # read input() and save to input_num variable
    num.append(input_num) # number input_num to num list
    if input_num > max_num: 
        max_num = input_num
        index = i + 1 #index start with 0 so +1 (print as a human? than think as a computer and add up the grammer)

print(max_num)
print(index)

"""
#yh #bi
max_val , max_idx= -1, -1

for i in range(9):
    tmp = int(input())
    if tmp > max_val:
        max_val, max_idx = tmp, i + 1

print(max_val)
print(max_idx)






yh
문제 전부 풀어서 다시 올려드립니다..!
0x02 : 최댓값
 - 파이썬 : https://www.acmicpc.net/source/63153137
 - C++ : https://www.acmicpc.net/source/63188185
0x03 : 방번호
 - 파이썬 : https://www.acmicpc.net/source/63155774
 - C++ : https://www.acmicpc.net/source/63194893
0x04 : 키로거
 - C++ : https://www.acmicpc.net/source/63197221

 
bi
1: 최댓값(https://www.acmicpc.net/source/63170402)
2: 방번호 풀이(https://www.acmicpc.net/source/63169988)
3: 키로거(https://www.acmicpc.net/source/63170119)
"""

index= 배열의 ~번째(아파트 1508호)
list = 배열 (아파트 1000라인)
mvc model=코드 적은 것, view=보여주는 것, c=반응형을 위해 돌아가기 위한 set up? 

해석
1. 작성한 코드에 대한 전체적인 내용 정리

이 문제는 9개의 숫자를 입력 받으면 입력받은 수 중 가장 큰 숫자의 값과 순서를 출력하는 문제이다. 
입력받은 숫자로 리스트를 먼저 생성하고 가장 큰 숫자는 max 함수를 사용해서 찾았다. 
또 가장 큰 값이 몇 번째 순서인지는 index 함수를 이용해서 찾았는데 index 함수의 순서는 0번째부터 시작하기 때문에 1을 더해주었다. 
숫자를 입력 받는 문장은 한 줄에 하나씩 9번을 입력받기 때문에 for문을 이용하였고 list comprehension 표현식으로 한 줄로 작성해보기도 했다. 


2. 코드 상단, 숫자를 입력 받아 리스트를 생성하는 코드 두 종류를 비교해본다.
for문 코드가 복잡하지 않은 경우 comprehension 표현식으로 작성하면 코드를 짧게 단축할 수 있어 편리하다.

 

for문으로 작성 할 때는 변수에 빈 리스트를 먼저 생성하고서 for문의 실행할 문장에서 하나씩 입력받는 숫자를 append 함수로 요소를 추가한다. 
comprehension 표현식은 [ 실행 문장 for 변수 in iterable 자료형 ] 형태로 작성할 수 있다. 
for문에서 실행할 문장을 가장 앞에 작성하고 뒤에는 for문의 맨 첫째줄에 적는 형태를 그대로 입력하면 된다. 
append 함수를 사용하지 않아도 for문으로 생성되는 값들이 리스트의 요소가 된다.
max 함수로 리스트의 가장 큰 수를 찾고 index 함수로 위치를 찾는다. 
이 때, 인덱스는 0부터 시작하니까 1을 더해주어야 한다. 

1) for 문
numbers = []   # empty num list
for _ in range(9):   # repeat 9 times, _ ==Iterate nine times. The underscore _ is used as a convention when we don't need to use the loop variable.
    i = int(input())  # Read an integer input from the user and store it in the variable i.
    numbers.append(i) #  Add the input number i to the numbers list.
    
print(max(numbers)) # Find the maximum value in the numbers list using the max() function and print it.
print(numbers.index(max(numbers))+1) # Find the index of the maximum value in the numbers list using the index() method. Since the indices start from 0, we add 1 to the index before printing it to match the expected output.


2) for문을 list comprehension 으로 작성한 코드

numbers = [int(input()) for _ in range(9)] #This line uses list comprehension, which is a concise way to create a list in a single line. It creates a list called numbers by iterating nine times using the range(9) function. For each iteration, it prompts the user to enter a number using input(), converts it to an integer using int(), and adds it to the list. The underscore _ is used as a convention when we don't need to use the loop variable. 한줄로 range(9) 함수를 사용해  9 번 반복해 numbers라는 목록만듬. 각 반복마다 input()을 사용해서 숫자입력하라는 메세지 넣고, int()를 사용해서 정수로 변환하고 목록에 추가. 

print(max(numbers)) #  Find the index of the maximum value in the numbers list using the index() method.
print(numbers.index(max(numbers)) + 1) #Find the index of the maximum value in the numbers list using the index() method. Since the indices start from 0, we add 1 to the index before printing it to match the expected output.

#list comprehension 은 Python에서 목록을 만드는 간결하고 강력한 방법입니다. 
표현식 다음에 루프 또는 조건문을 대괄호 안에 지정하여 목록을 만들 수 있습니다. 
이 경우 for _ in range(9) 루프의 각 반복에 대해 int(input()) 표현식이 실행되고 
결과 값이 numbers 목록에 자동으로 추가됩니다.

+
1. append( )
array.append(x) 형태로 사용한다. 
append는 덧붙인다는 뜻으로 괄호( ) 안에 값을 입력하면 새로운 요소를 array 맨 끝에 객체로 추가한다. 
요소를 추가할 때는 객체로 추가하게 되는데, 입력한 값이 리스트와 같은 반복 가능한 iterable 자료형이더라도 객체로 저장한다. 사용 예시는 아래와 같다.

>>> nums = [1, 2, 3]
>>> nums.append(4)
[1, 2, 3, 4]

>>> nums.append([5, 6])
[1, 2, 3, 4, [5, 6]] # 리스트가 하나의 객체로 추가되었음
append 함수를 사용해서 array의 맨 끝에 요소로 추가되었다. 
두 번째 예시의 경우 [5, 6]이라는 리스트를 추가하였는데 각 값이 5, 6의 요소로 추가되는 것이 아니라 [5, 6]이라는 리스트 형태가 그대로 요소로 추가된 것을 볼 수 있다. 
"""





"""
append()는 Python에서 목록 끝에 요소를 추가할 수 있는 메서드입니다. 
지정된 요소를 끝에 새 항목으로 추가하여 목록을 제자리에서 수정합니다. 
다음은 append()를 사용하는 구문입니다.


list_name.append(element)

여기서 list_name은 요소를 추가하려는 목록의 이름이고 element는 추가하려는 값입니다.
예를 들어 my_list라는 목록이 있고 그 끝에 숫자 5를 추가하려는 경우 다음과 같이 append()를 사용할 수 있습니다.


my_list = [1, 2, 3, 4]
my_list.append(5)
print(my_list)  # Output: [1, 2, 3, 4, 5]

반면 list comprehension 는 Python에서 목록을 만드는 간결한 방법입니다. 
표현식 다음에 루프 또는 조건문을 대괄호 안에 지정하여 새 목록을 생성할 수 있습니다. 
결과 목록은 기존 시퀀스(예: 범위, 목록, 문자열 등)를 반복하고 지정된 표현식을 각 요소에 적용하여 생성됩니다. 
목록 이해를 위한 일반적인 구문은 다음과 같습니다.

new_list = [expression for item in sequence]
식은 시퀀스의 각 항목에 대해 평가되고 결과는 새 목록으로 수집됩니다.

예를 들어, 1에서 5까지의 숫자 제곱을 포함하는 목록을 만들고 싶다고 가정해 보겠습니다. 목록 내포를 사용하여 이를 달성할 수 있습니다.

squares = [x ** 2 for x in range(1, 6)]
print(squares)  # Output: [1, 4, 9, 16, 25]

이 예에서 x ** 2 표현식은 1에서 5까지의 범위에서 
각 숫자 x의 제곱을 계산합니다. 결과 제곱은 수집되어 목록 내포를 사용하여 squares 목록에 저장됩니다.
목록 내포는 기존 데이터 또는 계산을 기반으로 새 목록을 만들 때 코드를 더 간결하고 표현력 있게 만드는 데 도움이 되는 Python의 강력한 기능입니다.
"""
